// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  isAdmin       Boolean       @default(false)
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  candidate     Candidate[]
  userProfile   UserProfile[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  CANDIDATE
  RECRUITER
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userType  Role     @map(name: "user_type")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  userId    String   @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model JobPool {
  id         Int         @id @default(autoincrement())
  name       String
  key        String
  createdAt  DateTime    @default(now()) @map(name: "created_at")
  updatedAt  DateTime    @updatedAt @map(name: "updated_at")
  candidates Candidate[]

  @@map("job_pool")
}

model Candidate {
  id                Int      @id @default(autoincrement())
  uId               String   @default(uuid())
  jobTitle          String   @map(name: "job_title")
  name              String
  email             String   @unique
  phone             String?
  currentLocation   String?  @map(name: "current_location")
  prefferedLocation String[] @map(name: "preffered_location")
  currentSalary     Float?   @map(name: "current_salary")
  totalExperience   Float    @map(name: "total_experience")
  workExperience    Json?    @map(name: "work_experience")
  education         Json?
  skills            String[]
  noticePeriod      Float?   @map(name: "notice_period")
  jobPoolId         Int?     @map(name: "job_pool_id")
  userId            String?  @map(name: "user_id")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  jobPool           JobPool? @relation(fields: [jobPoolId], references: [id])
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("candidate")
}

model ServiceDomain {
  id            Int             @id @default(autoincrement())
  name          String
  key           String
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  skillCategory SkillCategory[]

  @@map("service_domain")
}

model SkillCategory {
  id              Int           @id @default(autoincrement())
  label           String
  key             String
  description     String
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  updatedAt       DateTime      @updatedAt @map(name: "updated_at")
  serviceDomainId Int           @map(name: "service_domain_id")
  serviceDomain   ServiceDomain @relation(fields: [serviceDomainId], references: [id])

  @@map("skill_category")
}

model Skill {
  id        Int      @id @default(autoincrement())
  label     String
  key       String
  tags      String[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("skill")
}
